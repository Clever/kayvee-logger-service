package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// LogHandlerFunc turns a function with the right signature into a log handler
type LogHandlerFunc func(LogParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LogHandlerFunc) Handle(params LogParams) middleware.Responder {
	return fn(params)
}

// LogHandler interface for that can handle valid log params
type LogHandler interface {
	Handle(LogParams) middleware.Responder
}

// NewLog creates a new http.Handler for the log operation
func NewLog(ctx *middleware.Context, handler LogHandler) *Log {
	return &Log{Context: ctx, Handler: handler}
}

/*Log swagger:route POST /log log

Logs a given JSON-formatted kayvee event.

*/
type Log struct {
	Context *middleware.Context
	Handler LogHandler
}

func (o *Log) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewLogParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
